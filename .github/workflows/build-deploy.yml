name: Build server
on: push

jobs:
  build-windows:
    name: Build windows release
    runs-on: windows-2019
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo "BRANCH=${TAG/\/*}" >> $GITHUB_OUTPUT
          echo "VERSION=${TAG/*\/}" >> $GITHUB_OUTPUT

      - name: Build
        shell: cmd
        run: |
          cd server
          build.bat 0 %VERSION%
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}

      - name: Copy files
        shell: cmd
        run: |
          cd server
          mkdir upload\modules\js-module
          mkdir debug
          copy dist\js-module.dll upload\modules\js-module
          copy dist\libnode.dll upload\modules\js-module
          copy dist\js-module.pdb debug

      - uses: actions/upload-artifact@v3
        with:
          name: js-module-windows
          path: ./server/upload/

      - uses: actions/upload-artifact@v3
        with:
          name: js-module-windows-debug
          path: ./server/debug

  build-linux:
    name: Build linux release
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo "BRANCH=${TAG/\/*}" >> $GITHUB_OUTPUT
          echo "VERSION=${TAG/*\/}" >> $GITHUB_OUTPUT
          cd shared/deps/cpp-sdk
          echo "SDK_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          cd server
          ./build.sh %VERSION%
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}

      - name: Copy files
        run: |
          cd server
          mkdir -p upload/modules/js-module
          cp ./dist/libjs-module.so ./upload/modules/js-module
          cp ./dist/libnode.so.108 ./upload/modules/js-module
          echo ${{ steps.version.outputs.SDK_COMMIT }} >> ./upload/sdk.version

      - uses: actions/upload-artifact@v3
        with:
          name: js-module-linux
          path: ./server/upload/
          
  remove-old-artifacts:
        needs: [build-windows, build-linux]
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - name: Remove old artifacts
              uses: c-hive/gha-remove-artifacts@v1
              with:
                  age: '1 day'
                  skip-recent: 1
